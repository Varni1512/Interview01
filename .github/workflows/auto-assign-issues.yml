# Name of the workflow
name: Automatic Issue Assignment and Colorful Labeling

on:
  issues:
    types: [opened, reopened]
  workflow_dispatch:

permissions:
  issues: write

jobs:
  auto-assign-and-label:
    if: github.event_name == 'issues'
    runs-on: ubuntu-latest
    steps:
      - name: Assign and label issue with colors
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = context.issue.number;
            const issueCreator = context.payload.issue.user.login;

            // Define required labels and their colors
            const requiredLabels = [
              { name: 'assigned', color: '0E8A16' },     // green
              { name: 'gssoc2025', color: 'B60205' },   // red
              { name: 'gssoc', color: 'FBCA04' },       // yellow
              { name: 'gssoc25', color: '1D76DB' }      // blue
            ];

            // Get existing labels on the issue
            const { data: currentLabels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            const existingLabelNames = currentLabels.map(l => l.name);

            // Assign if not already assigned
            const isAssigned = context.payload.issue.assignees && context.payload.issue.assignees.length > 0;
            if (!isAssigned) {
              console.log(`Assigning issue #${issueNumber} to ${issueCreator}.`);
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                assignees: [issueCreator]
              });
            } else {
              console.log(`Issue #${issueNumber} is already assigned.`);
            }

            // Add comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `Hello @${issueCreator}! This issue has been assigned to you.`
            });

            // Add missing labels with colors
            for (const label of requiredLabels) {
              if (!existingLabelNames.includes(label.name)) {
                // Check if the label exists globally in repo, else create it
                try {
                  await github.rest.issues.getLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: label.name
                  });
                } catch (err) {
                  console.log(`Label ${label.name} does not exist, creating it.`);
                  await github.rest.issues.createLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: label.name,
                    color: label.color
                  });
                }
                // Add label to the issue
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  labels: [label.name]
                });
                console.log(`Added label ${label.name} to issue #${issueNumber}.`);
              }
            }

  process-old-issues:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Process old and unassigned issues
        uses: actions/github-script@v6
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const requiredLabels = [
              { name: 'assigned', color: '0E8A16' },     
              { name: 'gssoc2025', color: 'B60205' },   
              { name: 'gssoc', color: 'FBCA04' },       
              { name: 'gssoc25', color: '1D76DB' }      
            ];

            console.log('Looking for old and unassigned issues...');
            const { data: issues } = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: 'open',
              per_page: 100
            });

            for (const issue of issues) {
              const issueNumber = issue.number;
              const issueCreator = issue.user.login;
              const existingLabelNames = issue.labels.map(l => l.name);

              // Assign if not assigned
              const isAssigned = issue.assignees && issue.assignees.length > 0;
              if (!isAssigned) {
                try {
                  await github.rest.issues.addAssignees({
                    owner,
                    repo,
                    issue_number: issueNumber,
                    assignees: [issueCreator]
                  });
                  console.log(`Issue #${issueNumber} assigned to ${issueCreator}.`);
                } catch (error) {
                  console.error(`Error assigning issue #${issueNumber}: ${error.message}`);
                }
              } else {
                console.log(`Issue #${issueNumber} is already assigned.`);
              }

              // Add comment
              try {
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: issueNumber,
                  body: `Hello @${issueCreator}! This issue has been assigned to you.`
                });
                console.log(`Comment added to issue #${issueNumber}.`);
              } catch (error) {
                console.error(`Error adding comment to issue #${issueNumber}: ${error.message}`);
              }

              // Add missing labels with colors
              for (const label of requiredLabels) {
                if (!existingLabelNames.includes(label.name)) {
                  // Check if the label exists globally
                  try {
                    await github.rest.issues.getLabel({ owner, repo, name: label.name });
                  } catch (err) {
                    console.log(`Label ${label.name} does not exist, creating it.`);
                    await github.rest.issues.createLabel({
                      owner,
                      repo,
                      name: label.name,
                      color: label.color
                    });
                  }

                  try {
                    await github.rest.issues.addLabels({
                      owner,
                      repo,
                      issue_number: issueNumber,
                      labels: [label.name]
                    });
                    console.log(`Added label ${label.name} to issue #${issueNumber}.`);
                  } catch (err) {
                    console.error(`Error adding label ${label.name} to issue #${issueNumber}: ${err.message}`);
                  }
                }
              }
            }

            console.log('Finished processing old issues.');
